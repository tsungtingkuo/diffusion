package predictor;

import java.util.*;
import network.*;

public class GuidedDHopKNeighborsPredictor extends GuidedKNeighborsPredictor {
	
	int d = 1;

	public DiffusionNetwork predict(DiffusionNetwork result, int concept, long[] aggresives) throws Exception {
	
		// Guided select k neighbors
		Vector<Long> queue = new Vector<Long>();
		Vector<Long> nextqueue = new Vector<Long>();
		for(long u : aggresives) {
			queue.add(u);
		}
		for(int j=0; j<d; j++) {
			for(long uid1 : queue) {
				Vector<Long> candidates = getCandidates(uid1);
				if(candidates.size() <= k) {
					for(int i=0; i<candidates.size(); i++) {
						long uid2 = candidates.get(i);
						result = this.activate(result, uid1, uid2);
						nextqueue.add(uid2);
					}
				}
				else {
					long[] uid2s = this.selectTopK(candidates, uid1, k);
					for(long uid2 : uid2s) {
						result = this.activate(result, uid1, uid2);
						nextqueue.add(uid2);
					}
				}
			}
			queue = new Vector<Long>(nextqueue);
			nextqueue = new Vector<Long>();
		}
		
		return result;
	}

	public GuidedDHopKNeighborsPredictor(DiffusionNetwork dn, DiffusionNetwork dnt) {
		super(dn, dnt);
	}

	/**
	 * @return the d
	 */
	public int getD() {
		return d;
	}

	/**
	 * @param d the d to set
	 */
	public void setD(int d) {
		this.d = d;
	}
}
