import cc.mallet.types.*;
import cc.mallet.pipe.*;
import cc.mallet.pipe.iterator.*;
import cc.mallet.topics.*;
import java.util.*;
import java.util.regex.*;
import java.io.*;
import utility.*;

public class Main_TopicModel {

	public static void main(String[] args) throws Exception {

		// Parameter
		int numIterations = 1000;
		int numTopics = 7;
		double alphaT = (double)50/(double)numTopics;	//Fixed
		double betaW= 0.1;	// Fixed

		// Validation
		String valid = "";
		//String valid = "valid_";
		
		// Level
		//String level = "";
		//String level = "_message";
		//String level = "_link";
		//String level = "_node";
		//String level = "_mr";
		String level = "_mr_node";

		// File names
    	String inputFileName = "topic/" + valid + "doc" + level + ".txt";
		String outputFileName = "topic/" + valid + "output" + level + ".txt";
		String modelFileName = "topic/" + valid + "topic" + level + ".model";
		String documentTopicFileName = "topic/" + valid + "doctopic" + level + ".txt";
		
		// Encoding
		String encoding = "UTF-8";
		
		String p = "\\p{L}";
		//p += "\\p{N}";
		//p += "\\P{InCJK_Unified_Ideographs}";
		//p += "\\p{InCJK_Radicals_Supplement}";
		//p += "\\p{InCJK_Symbols_and_Punctuation}"; 
		//p += "\\p{InEnclosed_CJK_Letters_and_Months}";
		//p += "\\p{InCJK_Compatibility}"; 
		//p += "\\p{InCJK_Unified_Ideographs_Extension_A}"; 
		//p += "\\p{InCJK_Compatibility_Ideographs}"; 
		//p += "\\p{InCJK_Compatibility_Forms}"; 

		// Timer start
		long startTime = (new Date()).getTime();
		System.out.println("Timer start ... ");

		// Begin by importing documents from text to feature sequences
		ArrayList<Pipe> pipeList = new ArrayList<Pipe>();

		// Pipes: lowercase, tokenize, remove stopwords, map to features
		pipeList.add( new CharSequenceLowercase() );
		pipeList.add( new CharSequence2TokenSequence(Pattern.compile("[" + p + "][" + p + "\\p{P}]+[" + p + "]")) );
		pipeList.add( new TokenSequenceRemoveStopwords(new File("list/stopword.txt"), encoding, false, false, false) );
		pipeList.add( new TokenSequence2FeatureSequence() );

		InstanceList instances = new InstanceList (new SerialPipes(pipeList));

		Reader fileReader = new InputStreamReader(new FileInputStream(new File(inputFileName)), encoding);
		instances.addThruPipe(new CsvIterator (fileReader, Pattern.compile("^(\\S*)[\\s,]*(\\S*)[\\s,]*(.*)$"),
											   3, 2, 1)); // data, label, name fields

//		for(int i=0; i<instances.size(); i++) {
//			Instance instance = instances.get(i);
//			System.out.println(instance.getData());
//		}
		
		// Output
		FileOutputStream fos = new FileOutputStream(outputFileName);
		OutputStreamWriter osw = new OutputStreamWriter(fos, encoding);
		BufferedWriter bw = new BufferedWriter(osw);
		
		// Create a model with 100 topics, alpha_t = 0.01, beta_w = 0.01
		//  Note that the first parameter is passed as the sum over topics, while
		//  the second is 
		ParallelTopicModel model = new ParallelTopicModel(numTopics, alphaT*numTopics, betaW);

		model.addInstances(instances);

		// Use two parallel samplers, which each look at one half the corpus and combine
		//  statistics after every iteration.
		model.setNumThreads(2);

		// Run the model for 50 iterations and stop (this is for testing only, 
		//  for real applications, use 1000 to 2000 iterations)
		model.setNumIterations(numIterations);
		model.estimate();

		// Show the words and topics in the first instance

		// The data alphabet maps word IDs to strings
		Alphabet dataAlphabet = instances.getDataAlphabet();
		
		FeatureSequence tokens = (FeatureSequence) model.getData().get(0).instance.getData();
		LabelSequence topics = model.getData().get(0).topicSequence;
		
		Formatter out = new Formatter(new StringBuilder(), Locale.TAIWAN);
		for (int position = 0; position < tokens.getLength(); position++) {
			out.format("%s-%d ", dataAlphabet.lookupObject(tokens.getIndexAtPosition(position)), topics.getIndexAtPosition(position));
		}
		System.out.println(out);
		bw.write(out + "\n");
		
		// Estimate the topic distribution of the first instance, 
		//  given the current Gibbs state.
		double[] topicDistribution = model.getTopicProbabilities(0);

		// Get an array of sorted sets of word ID/count pairs
		ArrayList<TreeSet<IDSorter>> topicSortedWords = model.getSortedWords();
		
		// Show top 5 words in topics with proportions for the first document
		for (int topic = 0; topic < numTopics; topic++) {
			Iterator<IDSorter> iterator = topicSortedWords.get(topic).iterator();
			
			out = new Formatter(new StringBuilder(), Locale.TAIWAN);
			out.format("%d\t%.3f\t", topic, topicDistribution[topic]);
			int rank = 0;
			while (iterator.hasNext() && rank < 5) {
				IDSorter idCountPair = iterator.next();
				out.format("%s (%.0f) ", dataAlphabet.lookupObject(idCountPair.getID()), idCountPair.getWeight());
				rank++;
			}
			System.out.println(out);
			bw.write(out + "\n");
		}
	
		// Create a new instance with high probability of topic 0
		StringBuilder topicZeroText = new StringBuilder();
		Iterator<IDSorter> iterator = topicSortedWords.get(0).iterator();

		int rank = 0;
		while (iterator.hasNext() && rank < 5) {
			IDSorter idCountPair = iterator.next();
			topicZeroText.append(dataAlphabet.lookupObject(idCountPair.getID()) + " ");
			rank++;
		}

		// Create a new instance named "test instance" with empty target and source fields.
		InstanceList testing = new InstanceList(instances.getPipe());
		testing.addThruPipe(new Instance(topicZeroText.toString(), null, "test instance", null));

		TopicInferencer inferencer = model.getInferencer();
		double[] testProbabilities = inferencer.getSampledDistribution(testing.get(0), 10, 1, 5);
		System.out.println("0\t" + testProbabilities[0]);
		bw.write("0\t" + testProbabilities[0]);

		bw.flush();
		bw.close();
		osw.close();
		fos.close();
		
		// Timer stop
		long stopTime = (new Date()).getTime();
		long elapsedTime = stopTime - startTime;
		System.out.println("Timer stop, elapsed seconds = " + elapsedTime/1000);

		// Save files
		model.write(new File(modelFileName));
		model.printDocumentTopics(new File(documentTopicFileName));
		Utility.extractFile(documentTopicFileName, 1000);
	}
}
