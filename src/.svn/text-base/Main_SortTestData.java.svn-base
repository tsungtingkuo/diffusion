import java.util.*;
import utility.*;
import network.*;

public class Main_SortTestData {

	public static void main(String[] args) throws Exception {
				
		// Validation
		String valid = "";
		//String valid = "valid_";
		if(args.length > 0) {
			valid = "valid_";
		}

		// File names
    	String listFileName = "list/" + valid + "test.txt";
    	
		// Dataset
		String dataset = "plurk";

		// Encoding
		String encoding = "UTF-8";
		
		// Timer start
		long startTime = (new Date()).getTime();
		System.out.println("Timer start ... ");

		// Diffusion Network
    	System.out.print("Loading networks ... ");
    	DiffusionNetwork dntrain = DiffusionNetworkFactory.getDiffusionNetwork("dna/dn_" + valid + "train.txt");
    	System.out.println("done.");
    	
    	// Sort data (and then filter!)
    	//long start = Time.getStart();
    	//long stop = Time.getStop();
    	int[] concepts = Utility.loadIntegerArray(listFileName);
    	CascadesManager cm = new CascadesManager(encoding);
    	for(int concept : concepts) {
    		System.out.print("Sorting concept " + concept + " ... ");
    		cm.loadCascades(concept, "data/" + dataset + "_iii/" + valid + "test/response_" + concept + "_test.txt");
    		cm.sortCascades(concept);
    		cm.filterCascades(concept, dntrain);
    		//cm.filterCascades(concept, start, stop);
    		cm.saveCascades(concept, "data/" + dataset + "_iii/" + valid + "test/sorted_" + concept + "_test.txt");
    		System.out.println("done.");
    	}

		// Timer stop
		long stopTime = (new Date()).getTime();
		long elapsedTime = stopTime - startTime;
		System.out.println("Timer stop, elapsed seconds = " + elapsedTime/1000);
	}
}
