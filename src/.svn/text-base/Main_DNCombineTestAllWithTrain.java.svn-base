import java.util.*;

import utility.Utility;
import network.*;

public class Main_DNCombineTestAllWithTrain {

	public static void main(String[] args) throws Exception {
		
		// Validation
		String valid = "";
		//String valid = "valid_";
		if(args.length > 0) {
			valid = "valid_";
		}

		// File names
    	String testListFileName = "list/" + valid + "test.txt";
		
		// Dataset
		String dataset = "plurk";

		// Timer start
		long startTime = (new Date()).getTime();
		System.out.println("Timer start ... ");

		// Combine test diffusion networks
		String testFileName = "dna/dn_" + valid + "test.txt";
		String testPrefix = "data/" + dataset + "_iii/" + valid + "test/dn_";
		String testPostfix = "_test.txt";
		int[] testList = Utility.loadIntegerArray(testListFileName);
		DiffusionNetwork testDN = DiffusionNetworkFactory.combineDiffusionNetworkAll(testPrefix, testPostfix, testList);
		DiffusionNetworkFactory.saveDiffusionNetwork(testDN, testFileName);

		// Combine train+test diffusion networks
		String trainFileName = "dna/dn_" + valid + "train.txt";		
		String diffusionFileName = "dna/dn_" + valid + "train_test.txt";
		DiffusionNetwork dn = DiffusionNetworkFactory.combineDiffusionNetwork(trainFileName, testFileName);
		DiffusionNetworkFactory.saveDiffusionNetwork(dn, diffusionFileName);
				
		// Load train+test diffusion network
		dn = DiffusionNetworkFactory.getDiffusionNetwork(diffusionFileName);
		System.out.println("Vertex = " + dn.getVertexCount());
		System.out.println("Edge = " + dn.getEdgeCount());
		
		// Connected component
		Vector<Integer> sizes = new Vector<Integer>();
		Set<Set<Long>> connectedComponents = Statistics.getConnectedComponent(dn);
		for(Set<Long> component : connectedComponents) {
			sizes.add(component.size());
		}
		TreeSet<Integer> ts = new TreeSet<Integer>(sizes);
		System.out.println("GCC = " + ts.last());

		// Timer stop
		long stopTime = (new Date()).getTime();
		long elapsedTime = stopTime - startTime;
		System.out.println("Timer stop, elapsed seconds = " + elapsedTime/1000);
	}
}
