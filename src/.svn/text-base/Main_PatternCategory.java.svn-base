import java.util.*;

import pattern.*;
import utility.Utility;
import network.*;

public class Main_PatternCategory {
	
	public static void main(String[] args) throws Exception {
		
		// Validation
		String valid = "";
		//String valid = "valid_";

		// Parameters
		int support = 1;
		if(args.length > 0) {
			support = Integer.parseInt(args[0]);
		}
	
		String substring = "";
		if(args.length > 1) {
			substring = args[1];
		}
		
		// File names
    	String trainListFileName = "list/" + valid + "train.txt";
    	String patternPrefix = "pattern/" + valid + "train_" + support + "_";
    	if(!substring.equalsIgnoreCase("")) {
        	patternPrefix = "pattern/" + valid + "train_" + substring + "_" + support + "_";
    	}
    	String patternPostfix = ".txt";

    	// Dataset
    	String dataset = "plurk";
    	
		// Encoding
		String encoding = "UTF-8";
		
		// Timer start
		long startTime = (new Date()).getTime();
		System.out.println("Timer start ... ");

		// List
    	int[] trainConcepts = Utility.loadIntegerArray(trainListFileName);

		// Category
		TreeMap<Integer, Integer> topicToCategory = Utility.loadIntegerToIntegerTreeMap("list/all_category.txt");
		int categoryNumber = 7;

		for(int i=1; i<=categoryNumber; i++) {
			
			System.out.println("Category " + i);
			
			// Cascades
	    	System.out.print("Loading cascades ... ");
	    	CascadesManager cm = new CascadesManager(encoding);
	    	for(int trainConcept : trainConcepts) {
	    		if(topicToCategory.get(trainConcept) == i) {
	    			cm.loadCascades(trainConcept, "data/" + dataset + "_iii/" + valid + "train/sorted_" + trainConcept + "_train.txt");
	    		}
	    	}
	    	System.out.println("done.");
	    	   	
			// Miner
	    	InterTopicTrain train = new InterTopicTrain(cm, support, substring);
	    	train.identifyOneHopPatterns();
	    	train.savePatterns(patternPrefix, "_" + i + patternPostfix);
		}

		// Timer stop
		long stopTime = (new Date()).getTime();
		long elapsedTime = stopTime - startTime;
		System.out.println("Timer stop, elapsed seconds = " + elapsedTime/1000);
	}
}
